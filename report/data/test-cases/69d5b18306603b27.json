{
  "uid" : "69d5b18306603b27",
  "name" : "test_sc_login[data1]",
  "fullName" : "case.test_login.TestLogin#test_sc_login",
  "historyId" : "9019ca1c4aeda8b59c4e17ed39c9b453",
  "time" : {
    "start" : 1644938372669,
    "stop" : 1644938378890,
    "duration" : 6221
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 登录失败，请检查您的用户名或密码是否填写正确。\nMessage: unexpected alert open: {Alert text : 登录失败，请检查您的用户名或密码是否填写正确。}\n  (Session info: chrome=98.0.4758.82)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00F87AC3+2587331]\n\tOrdinal0 [0x00F1ADD1+2141649]\n\tOrdinal0 [0x00E13BB8+1063864]\n\tOrdinal0 [0x00E6884B+1411147]\n\tOrdinal0 [0x00E584A6+1344678]\n\tOrdinal0 [0x00E353F6+1201142]\n\tOrdinal0 [0x00E362E6+1204966]\n\tGetHandleVerifier [0x0112DF22+1680738]\n\tGetHandleVerifier [0x011E0DBC+2413564]\n\tGetHandleVerifier [0x0101D151+563089]\n\tGetHandleVerifier [0x0101BF13+558419]\n\tOrdinal0 [0x00F2081E+2164766]\n\tOrdinal0 [0x00F25508+2184456]\n\tOrdinal0 [0x00F25650+2184784]\n\tOrdinal0 [0x00F2F5BC+2225596]\n\tBaseThreadInitThunk [0x76CF6359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7B74+228]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7B44+180]",
  "statusTrace" : "self = <case.test_login.TestLogin object at 0x000001A96E4DD670>\ndata = {'密码': '123456678', '用户名': 'lzc4014688'}\n\n    @allure.story(\"输入用户名和密码\")\n    @pytest.mark.parametrize(\"data\", Data(\"./data/data.xls\", \"登录\").readData())\n    def test_sc_login(self,data):\n        login_input = InputValue(self.driver)\n        with allure.step(\"输入登录名\"):\n            userName = data[\"用户名\"]\n            login_input.input_value(\"用户名\", \"{}\".format(userName))\n            # picture= Screen(self.driver).screenshot_element(\"用户名\")\n            # allure.attach(picture,attachment_type=allure.attachment_type.PNG)\n        time.sleep(1)\n        with allure.step(\"输入密码\"):\n            psw = data[\"密码\"]\n            login_input.input_value(\"密码\", \"{}\".format(psw))\n            # picture = Screen(self.driver).screenshot_element(\"密码\")\n            # allure.attach(picture, attachment_type=allure.attachment_type.PNG)\n        with allure.step(\"点击保持登录\"):\n            ButtonClick(self.driver).button_click(\"保持登录\")\n            # picture = Screen(self.driver).screenshot_element(\"保持登录\")\n            # allure.attach(picture, attachment_type=allure.attachment_type.PNG)\n        with allure.step(\"点击登录按钮\"):\n            ButtonClick(self.driver).button_click(\"登录\")\n        time.sleep(1)\n        with allure.step(\"是否有alert弹窗\"):\n            IsAlert(self.driver).isExiteAlert()\n        time.sleep(4)\n        with allure.step(\"检查是否登录成功\"):\n>           CheckValue(self.driver).check_taget_value(\"退出\")\n\ncase\\test_login.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\checkValue.py:10: in check_taget_value\n    page = self.driver.find_element_by_xpath(\"//*\").get_attribute(\"outerHTML\")\ne:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:520: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\ne:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\ne:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A96E232100>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"登录失败，请检查您的用户名或密码是否填写正确。\"},\"error\":\"unexpected alert open\",\"message...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AB7B74+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AB7B44+180]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 登录失败，请检查您的用户名或密码是否填写正确。\nE           Message: unexpected alert open: {Alert text : 登录失败，请检查您的用户名或密码是否填写正确。}\nE             (Session info: chrome=98.0.4758.82)\nE           Stacktrace:\nE           Backtrace:\nE           \tOrdinal0 [0x00F87AC3+2587331]\nE           \tOrdinal0 [0x00F1ADD1+2141649]\nE           \tOrdinal0 [0x00E13BB8+1063864]\nE           \tOrdinal0 [0x00E6884B+1411147]\nE           \tOrdinal0 [0x00E584A6+1344678]\nE           \tOrdinal0 [0x00E353F6+1201142]\nE           \tOrdinal0 [0x00E362E6+1204966]\nE           \tGetHandleVerifier [0x0112DF22+1680738]\nE           \tGetHandleVerifier [0x011E0DBC+2413564]\nE           \tGetHandleVerifier [0x0101D151+563089]\nE           \tGetHandleVerifier [0x0101BF13+558419]\nE           \tOrdinal0 [0x00F2081E+2164766]\nE           \tOrdinal0 [0x00F25508+2184456]\nE           \tOrdinal0 [0x00F25650+2184784]\nE           \tOrdinal0 [0x00F2F5BC+2225596]\nE           \tBaseThreadInitThunk [0x76CF6359+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x77AB7B74+228]\nE           \tRtlGetAppContainerNamedObjectPath [0x77AB7B44+180]\n\ne:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:246: UnexpectedAlertPresentException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "xunit_setup_class_fixture_TestLogin",
    "time" : {
      "start" : 1644938361961,
      "stop" : 1644938363707,
      "duration" : 1746
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 登录失败，请检查您的用户名或密码是否填写正确。\nMessage: unexpected alert open: {Alert text : 登录失败，请检查您的用户名或密码是否填写正确。}\n  (Session info: chrome=98.0.4758.82)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00F87AC3+2587331]\n\tOrdinal0 [0x00F1ADD1+2141649]\n\tOrdinal0 [0x00E13BB8+1063864]\n\tOrdinal0 [0x00E6884B+1411147]\n\tOrdinal0 [0x00E584A6+1344678]\n\tOrdinal0 [0x00E353F6+1201142]\n\tOrdinal0 [0x00E362E6+1204966]\n\tGetHandleVerifier [0x0112DF22+1680738]\n\tGetHandleVerifier [0x011E0DBC+2413564]\n\tGetHandleVerifier [0x0101D151+563089]\n\tGetHandleVerifier [0x0101BF13+558419]\n\tOrdinal0 [0x00F2081E+2164766]\n\tOrdinal0 [0x00F25508+2184456]\n\tOrdinal0 [0x00F25650+2184784]\n\tOrdinal0 [0x00F2F5BC+2225596]\n\tBaseThreadInitThunk [0x76CF6359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7B74+228]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7B44+180]",
    "statusTrace" : "self = <case.test_login.TestLogin object at 0x000001A96E4DD670>\ndata = {'密码': '123456678', '用户名': 'lzc4014688'}\n\n    @allure.story(\"输入用户名和密码\")\n    @pytest.mark.parametrize(\"data\", Data(\"./data/data.xls\", \"登录\").readData())\n    def test_sc_login(self,data):\n        login_input = InputValue(self.driver)\n        with allure.step(\"输入登录名\"):\n            userName = data[\"用户名\"]\n            login_input.input_value(\"用户名\", \"{}\".format(userName))\n            # picture= Screen(self.driver).screenshot_element(\"用户名\")\n            # allure.attach(picture,attachment_type=allure.attachment_type.PNG)\n        time.sleep(1)\n        with allure.step(\"输入密码\"):\n            psw = data[\"密码\"]\n            login_input.input_value(\"密码\", \"{}\".format(psw))\n            # picture = Screen(self.driver).screenshot_element(\"密码\")\n            # allure.attach(picture, attachment_type=allure.attachment_type.PNG)\n        with allure.step(\"点击保持登录\"):\n            ButtonClick(self.driver).button_click(\"保持登录\")\n            # picture = Screen(self.driver).screenshot_element(\"保持登录\")\n            # allure.attach(picture, attachment_type=allure.attachment_type.PNG)\n        with allure.step(\"点击登录按钮\"):\n            ButtonClick(self.driver).button_click(\"登录\")\n        time.sleep(1)\n        with allure.step(\"是否有alert弹窗\"):\n            IsAlert(self.driver).isExiteAlert()\n        time.sleep(4)\n        with allure.step(\"检查是否登录成功\"):\n>           CheckValue(self.driver).check_taget_value(\"退出\")\n\ncase\\test_login.py:47: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\checkValue.py:10: in check_taget_value\n    page = self.driver.find_element_by_xpath(\"//*\").get_attribute(\"outerHTML\")\ne:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:520: in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\ne:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1244: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\ne:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A96E232100>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"登录失败，请检查您的用户名或密码是否填写正确。\"},\"error\":\"unexpected alert open\",\"message...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AB7B74+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AB7B44+180]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 登录失败，请检查您的用户名或密码是否填写正确。\nE           Message: unexpected alert open: {Alert text : 登录失败，请检查您的用户名或密码是否填写正确。}\nE             (Session info: chrome=98.0.4758.82)\nE           Stacktrace:\nE           Backtrace:\nE           \tOrdinal0 [0x00F87AC3+2587331]\nE           \tOrdinal0 [0x00F1ADD1+2141649]\nE           \tOrdinal0 [0x00E13BB8+1063864]\nE           \tOrdinal0 [0x00E6884B+1411147]\nE           \tOrdinal0 [0x00E584A6+1344678]\nE           \tOrdinal0 [0x00E353F6+1201142]\nE           \tOrdinal0 [0x00E362E6+1204966]\nE           \tGetHandleVerifier [0x0112DF22+1680738]\nE           \tGetHandleVerifier [0x011E0DBC+2413564]\nE           \tGetHandleVerifier [0x0101D151+563089]\nE           \tGetHandleVerifier [0x0101BF13+558419]\nE           \tOrdinal0 [0x00F2081E+2164766]\nE           \tOrdinal0 [0x00F25508+2184456]\nE           \tOrdinal0 [0x00F25650+2184784]\nE           \tOrdinal0 [0x00F2F5BC+2225596]\nE           \tBaseThreadInitThunk [0x76CF6359+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x77AB7B74+228]\nE           \tRtlGetAppContainerNamedObjectPath [0x77AB7B44+180]\n\ne:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:246: UnexpectedAlertPresentException",
    "steps" : [ {
      "name" : "输入登录名",
      "time" : {
        "start" : 1644938372669,
        "stop" : 1644938372737,
        "duration" : 68
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "输入密码",
      "time" : {
        "start" : 1644938373750,
        "stop" : 1644938373822,
        "duration" : 72
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "点击保持登录",
      "time" : {
        "start" : 1644938373822,
        "stop" : 1644938373853,
        "duration" : 31
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "点击登录按钮",
      "time" : {
        "start" : 1644938373853,
        "stop" : 1644938373884,
        "duration" : 31
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "是否有alert弹窗",
      "time" : {
        "start" : 1644938374885,
        "stop" : 1644938374886,
        "duration" : 1
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : false,
      "stepsCount" : 0,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "检查是否登录成功",
      "time" : {
        "start" : 1644938378887,
        "stop" : 1644938378889,
        "duration" : 2
      },
      "status" : "broken",
      "statusMessage" : "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: 登录失败，请检查您的用户名或密码是否填写正确。\nMessage: unexpected alert open: {Alert text : 登录失败，请检查您的用户名或密码是否填写正确。}\n  (Session info: chrome=98.0.4758.82)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00F87AC3+2587331]\n\tOrdinal0 [0x00F1ADD1+2141649]\n\tOrdinal0 [0x00E13BB8+1063864]\n\tOrdinal0 [0x00E6884B+1411147]\n\tOrdinal0 [0x00E584A6+1344678]\n\tOrdinal0 [0x00E353F6+1201142]\n\tOrdinal0 [0x00E362E6+1204966]\n\tGetHandleVerifier [0x0112DF22+1680738]\n\tGetHandleVerifier [0x011E0DBC+2413564]\n\tGetHandleVerifier [0x0101D151+563089]\n\tGetHandleVerifier [0x0101BF13+558419]\n\tOrdinal0 [0x00F2081E+2164766]\n\tOrdinal0 [0x00F25508+2184456]\n\tOrdinal0 [0x00F25650+2184784]\n\tOrdinal0 [0x00F2F5BC+2225596]\n\tBaseThreadInitThunk [0x76CF6359+25]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7B74+228]\n\tRtlGetAppContainerNamedObjectPath [0x77AB7B44+180]\n\n",
      "statusTrace" : "  File \"E:\\pycharm 2019\\项目列表\\chandao-pytest\\case\\test_login.py\", line 47, in test_sc_login\n    CheckValue(self.driver).check_taget_value(\"退出\")\n  File \"E:\\pycharm 2019\\项目列表\\chandao-pytest\\base\\checkValue.py\", line 10, in check_taget_value\n    page = self.driver.find_element_by_xpath(\"//*\").get_attribute(\"outerHTML\")\n  File \"e:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 520, in find_element_by_xpath\n    return self.find_element(by=By.XPATH, value=xpath)\n  File \"e:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1244, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n  File \"e:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 424, in execute\n    self.error_handler.check_response(response)\n  File \"e:\\python 3.8.7\\anzhuangwenjian\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 246, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "hasContent" : true,
      "stepsCount" : 0,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 6,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0
  },
  "afterStages" : [ {
    "name" : "xunit_setup_class_fixture_TestLogin::0",
    "time" : {
      "start" : 1644938389944,
      "stop" : 1644938392017,
      "duration" : 2073
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "禅道登录用例"
  }, {
    "name" : "story",
    "value" : "输入用户名和密码"
  }, {
    "name" : "parentSuite",
    "value" : "case"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "DESKTOP-TSJF9CB"
  }, {
    "name" : "thread",
    "value" : "14316-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'用户名': 'lzc4014688', '密码': '123456678'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "history" : {
      "statistic" : {
        "failed" : 0,
        "broken" : 5,
        "skipped" : 0,
        "passed" : 0,
        "unknown" : 0,
        "total" : 5
      },
      "items" : [ {
        "uid" : "f6af7dc4b18516bc",
        "reportUrl" : "http://localhost:8080/job/test/72/allure/#testresult/f6af7dc4b18516bc",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home",
        "time" : {
          "start" : 1644937843726,
          "stop" : 1644937843726,
          "duration" : 0
        }
      }, {
        "uid" : "bd37af8401760956",
        "reportUrl" : "http://localhost:8080/job/test/71/allure/#testresult/bd37af8401760956",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home",
        "time" : {
          "start" : 1644937806248,
          "stop" : 1644937806248,
          "duration" : 0
        }
      }, {
        "uid" : "4f16edc597859e17",
        "reportUrl" : "http://localhost:8080/job/test/70/allure/#testresult/4f16edc597859e17",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home",
        "time" : {
          "start" : 1644774675753,
          "stop" : 1644774675753,
          "duration" : 0
        }
      }, {
        "uid" : "9366fc0a8d1d2314",
        "reportUrl" : "http://localhost:8080/job/test/52/allure/#testresult/9366fc0a8d1d2314",
        "status" : "broken",
        "statusDetails" : "selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home",
        "time" : {
          "start" : 1644771781623,
          "stop" : 1644771781623,
          "duration" : 0
        }
      } ]
    },
    "tags" : [ ]
  },
  "source" : "69d5b18306603b27.json",
  "parameterValues" : [ "{'用户名': 'lzc4014688', '密码': '123456678'}" ]
}